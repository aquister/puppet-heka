# Converts stat values extracted from statmetric messages (see Stat Accumulator Input) to circular buffer data and periodically
# emits messages containing this data to be graphed by a DashboardOutput. Note that this filter expects the stats data to be
# available in the message fields, so the StatAccumInput must be configured with emit_in_fields set to true for this filter to work correctly.
#
# === Parameters:
#
# $ensure::                       This is used to set the status of the config file: present or absent
#                                 Default: present
#
### Common Filter Parameters::    Check heka::filter::sandboxfilter for the description
#
### Buffering::                   Check heka::filter::sandboxfilter for the description
#
### Common Sandbox Parameters::   Check heka::filter::sandboxfilter for the description
#
### Stats Graph Parameters
#
# $title::                        Title for the graph output generated by this filter.
#                                 Default "Stats"
#                                 Type: string
#
# $rows::                         The number of rows to store in our circular buffer. Each row represents one time interval.
#                                 Default 300
#                                 Type: uint
#
# $sec_per_row::                  The number of seconds in each circular buffer time interval.
#                                 Default 1
#                                 Type: uint
#
# $stats::                        Space separated list of stat names. Each specified stat will be expected to be found in the fields
#                                 of the received statmetric messages, and will be extracted and inserted into its own column in the
#                                 accumulated circular buffer.
#                                 Type: string
#
# $stat_labels::                  Space separated list of header label names to use for the extracted stats. Must be in the same order
#                                 as the specified stats. Any label longer than 15 characters will be truncated.
#                                 Type: string
#
# $preservation_version::         If preserve_data = true is set in the SandboxFilter configuration, then this value should be incremented
#                                 every time any edits are made to your rows, sec_per_row, stats, or stat_labels values, or else Heka will
#                                 fail to start because the preserved data will no longer match the filter's data structure.
#                                 Default 0
#                                 Type: uint
#
# $stat_aggregation::             Controls how the column data is aggregated when combining multiple circular buffers.
#                                 - "sum" - The total is computed for the time/column (default).
#                                 - "min" - The smallest value is retained for the time/column.
#                                 - "max" - The largest value is retained for the time/column.
#                                 - "none" - No aggregation will be performed the column.
#                                 Default "sum"
#                                 Type: string
#
# $stat_unit::                    The unit of measure (maximum 7 characters). Alpha numeric, '/', and '*' characters are allowed everything
#                                 else will be converted to underscores. i.e. KiB, Hz, m/s
#                                 Default "count"
#                                 Type: string
#
define heka::filter::statgraph (
  $ensure               = 'present',
  # Common Filter Parameters
  $message_matcher      = undef,
  $message_signer       = undef,
  $ticker_interval      = undef,
  $can_exit             = undef,
  $use_buffering        = undef,
  # Buffering
  $max_file_size        = undef,
  $max_buffer_size      = undef,
  $full_action          = undef,
  $cursor_update_count  = undef,
  # Common Sandbox Parameters
  $preserve_data        = undef,
  $memory_limit         = undef,
  $instruction_limit    = undef,
  $output_limit         = undef,
  $module_directory     = undef,
  # Stats Graph Parameters
  $title                = 'Stats',
  $rows                 = 300,
  $sec_per_row          = 1,
  # lint:ignore:parameter_order
  $stats,
  $stat_labels,
  # lint:endignore
  $preservation_version = undef,
  $stat_aggregation     = undef,
  $stat_unit            = undef,
) {
  validate_re($ensure, '^(present|absent)$')
  # Common Filter Parameters
  if $message_matcher { validate_string($message_matcher) }
  if $message_signer { validate_string($message_signer) }
  if $ticker_interval { validate_integer($ticker_interval) }
  if $can_exit { validate_bool($can_exit) }
  if $use_buffering { validate_bool($use_buffering) }
  # Buffering
  if $max_file_size { validate_integer($max_file_size) }
  if $max_buffer_size { validate_integer($max_buffer_size) }
  if $full_action { validate_re($full_action, '^(shutdown|drop|block)$') }
  if $cursor_update_count { validate_integer($cursor_update_count) }
  # Common Sandbox Parameters
  if $preserve_data { validate_bool($preserve_data) }
  if $memory_limit { validate_integer($memory_limit) }
  if $instruction_limit { validate_integer($instruction_limit) }
  if $output_limit { validate_integer($output_limit) }
  if $module_directory { validate_string($module_directory) }
  # Stats Graph Parameters
  validate_string($title, $stats, $stat_labels)
  validate_integer($rows, $sec_per_row,)
  if $preservation_version { validate_integer($preservation_version) }
  if $stat_aggregation { validate_string($stat_aggregation) }
  if $stat_unit { validate_string($stat_unit) }

  $script_type = 'lua'
  $filename = 'lua_filters/stat_graph.lua'
  $config = {
    'title'                => $title,
    'rows'                 => $rows,
    'sec_per_row'          => $sec_per_row,
    'stats'                => $stats,
    'stat_labels'          => $stat_labels,
    'preservation_version' => $preservation_version,
    'stat_aggregation'     => $stat_aggregation,
    'stat_unit'            => $stat_unit,
  }

  $full_name = "statgraph_${name}"
  heka::snippet { $full_name:
    ensure  => $ensure,
    content => template("${module_name}/filter/sandboxfilter.toml.erb"),
  }
}
