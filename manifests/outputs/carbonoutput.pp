# CarbonOutput plugins parse the "stat metric" messages generated by a StatAccumulator and write the extracted counter,
# timer, and gauge data out to a graphite compatible carbon daemon.
# Output is written over a TCP or UDP socket using the plaintext protocol.
#
# === Parameters:
#
# $ensure::                       This is used to set the status of the config file: present or absent
#                                 Default: present
#
### Common Output Parameters::  Check heka::outputs::tcpoutput for the desciption
#
### Carbon Parameters
#
# $address::                      An IP address:port on which this plugin will write to.
#                                 Default: "localhost:2003"
#                                 Type: string
#
# $protocol::                     "tcp" or "udp".
#                                 Default: tcp
#                                 Type: string
#
# $tcp_keep_alive::               If set, keep the TCP connection open and reuse it until a failure; then retry.
#                                 Default: false
#                                 Type: bool
#
define heka::outputs::carbonoutput (
  $ensure              = 'present',
  # Common Output Parameters
  $message_matcher     = undef,
  $message_signer      = undef,
  $ticker_interval     = 5,
  $encoder             = undef,
  $use_framing         = undef,
  $can_exit            = undef,
  $use_buffering       = undef,
  # Buffering
  $max_file_size       = undef,
  $max_buffer_size     = undef,
  $full_action         = undef,
  $cursor_update_count = undef,
  # Carbon Parameters
  $address             = 'localhost:2003',
  $protocol            = 'tcp',
  $tcp_keep_alive      = false,
) {
  validate_re($ensure, '^(present|absent)$')
  # Common Output Parameters
  if $message_matcher { validate_string($message_matcher) }
  if $message_signer { validate_string($message_signer) }
  if $ticker_interval { validate_integer($ticker_interval) }
  if $encoder { validate_string($encoder) }
  if $use_framing { validate_bool($use_framing) }
  if $can_exit { validate_bool($can_exit) }
  if $use_buffering { validate_bool($use_buffering) }
  # Buffering
  if $max_file_size { validate_integer($max_file_size) }
  if $max_buffer_size { validate_integer($max_buffer_size) }
  if $full_action { validate_re($full_action, '^(shutdown|drop|block)$') }
  if $cursor_update_count { validate_integer($cursor_update_count) }
  # Carbon Parameters
  validate_string($address)
  if $protocol { validate_re($protocol, '^(tcp|udp)$') }
  if $tcp_keep_alive { validate_bool($tcp_keep_alive) }

  $full_name = "carbon_${name}"
  heka::snippet { $full_name:
    ensure  => $ensure,
    content => template("${module_name}/plugin/carbonoutput.toml.erb"),
  }
}
